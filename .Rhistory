# get packages
p_needed <- c("haven", "plyr", "dplyr", "magrittr","broom")
packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
lapply(p_needed, require, character.only = TRUE)
gn.model <- function(part = 0, kan = 0, amt = 0, model = "2005") {
if (model=="2005") {
stim <-  -5.93 + 0.75*part + 0.38*kan - 1.52*amt } # formula from Gschwend/Norpoth 2005
else stim <-  -5.6  + 0.75*part + 0.38*kan - 1.5*amt    # formula from Norpoth/Gschwend 2010
return(stim)
}
gn.model()
gn.model(part = 45, kan = 60, amt = 3)
# import historical data
ger_df <- read_dta("data/ger_nat.dta")
names(ger_df)
head(ger_df)
plot(ger_df$gov_share_l3, ger_df$gov_share, pch = 20, ylim = c(30, 60))
abline(lm(gov_share ~ gov_share_l3, data = ger_df))
text(ger_df$gov_share_l3, ger_df$gov_share, labels = ger_df$year, pos = 3)
plot(ger_df$chancellor_polls, ger_df$gov_share, pch = 20, ylim = c(30, 65))
abline(lm(gov_share ~ chancellor_polls, data = ger_df))
text(ger_df$chancellor_polls, ger_df$gov_share, labels = ger_df$year, pos = 3)
plot(ger_df$term, ger_df$gov_share, pch = 20, ylim = c(30, 65))
abline(lm(gov_share ~ term, data = ger_df))
text(ger_df$term, ger_df$gov_share, labels = ger_df$year, pos = 2)
model_out <- lm(gov_share ~ gov_share_l3 + chancellor_polls + term, data = ger_df)
summary(model_out)
# evaluate fit
model_out_fit <- augment(model_out)
model_out_fit$year <- ger_df$year[2:18]
plot(model_out_fit$year, model_out_fit$gov_share, type = "o", xaxt = "n")
axis(1, model_out_fit$year, model_out_fit$year)
points(model_out_fit$year, model_out_fit$.fitted, col = "red", pch = 20)
# 2013 forecast, with and without prediction intervals
augment(model_out, newdata = filter(ger_df, year == 2013))
predict(model_out, filter(ger_df, year == 2013), se.fit = TRUE, interval = "confidence")
predict(model_out, filter(ger_df, year == 2013), se.fit = TRUE, interval = "prediction")
48.2/(48.2+46.1)
# get packages
p_needed <- c("haven", "plyr", "dplyr", "magrittr","broom")
packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
lapply(p_needed, require, character.only = TRUE)
ger_df <- read_dta("data/ger_nat.dta")
names(ger_df)
View(ger_df)
# inspect relationships between variables
plot(ger_df$gov_share_l3, ger_df$gov_share, pch = 20, ylim = c(30, 60))
abline(lm(gov_share ~ gov_share_l3, data = ger_df))
text(ger_df$gov_share_l3, ger_df$gov_share, labels = ger_df$year, pos = 3)
plot(ger_df$chancellor_polls, ger_df$gov_share, pch = 20, ylim = c(30, 65))
abline(lm(gov_share ~ chancellor_polls, data = ger_df))
text(ger_df$chancellor_polls, ger_df$gov_share, labels = ger_df$year, pos = 3)
plot(ger_df$term, ger_df$gov_share, pch = 20, ylim = c(30, 65))
abline(lm(gov_share ~ term, data = ger_df))
text(ger_df$term, ger_df$gov_share, labels = ger_df$year, pos = 2)
# run model
model_out <- lm(gov_share ~ gov_share_l3 + chancellor_polls + term, data = ger_df)
summary(model_out)
model_out_fit <- augment(model_out)
View(model_out_fit)
model_out_fit$year <- ger_df$year[2:18]
plot(model_out_fit$year, model_out_fit$gov_share, type = "o", xaxt = "n")
axis(1, model_out_fit$year, model_out_fit$year)
points(model_out_fit$year, model_out_fit$.fitted, col = "red", pch = 20)
augment(model_out, newdata = filter(ger_df, year == 2017))
augment(model_out, newdata = filter(ger_df, year == 2013))
predict(model_out, filter(ger_df, year == 2013), se.fit = TRUE, interval = "confidence")
predict(model_out, filter(ger_df, year == 2013), se.fit = TRUE, interval = "prediction")
model_out
str(model_out)
model_out$coefficients
model_out$model$gov_share
model_out$terms
# get packages
p_needed <- c("haven", "plyr", "dplyr", "ROAuth", "streamR", "pageviews", "statsgrokse", "stringr", "gtrendsR")
packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
lapply(p_needed, require, character.only = TRUE)
load("/Users/munzerts/Dropbox/Uni/Teaching/SS 2017/Hertie School - Election Forecasting/materials/twitter_auth.Rdata")
filterStream("german_parties.json", track = q, timeout = 60*1, oauth = twitCred)
q <- c("cdu","csu","spd","fdp","grüne","linke","afd","schulz","merkel","btw17")
filterStream("german_parties.json", track = q, timeout = 60*1, oauth = twitCred)
tweets <- parseTweets("german_parties.json", simplify = TRUE)
names(tweets)
cat(tweets$text[1])
cdu <- str_detect(tweets$text, regex("cdu|csu|merkel", ignore_case = TRUE))
spd <- str_detect(tweets$text, regex("spd|schulz", ignore_case = TRUE))
fdp <- str_detect(tweets$text, regex("fdp", ignore_case = TRUE))
gru <- str_detect(tweets$text, regex("grüne", ignore_case = TRUE))
lin <- str_detect(tweets$text, regex("linke", ignore_case = TRUE))
afd <- str_detect(tweets$text, regex("afd", ignore_case = TRUE))
mentions_df <- data.frame(cdu, spd, fdp, gru, lin, afd)
colMeans(mentions_df)
ls("package:pageviews")
trump_views <- article_pageviews(project = "en.wikipedia", article = "Donald Trump", user_type = "user", start = "2015070100", end = "2017040100")
head(trump_views)
clinton_views <- article_pageviews(project = "en.wikipedia", article = "Hillary Clinton", user_type = "user", start = "2015070100", end = "2017040100")
plot(ymd(trump_views$date), trump_views$views, col = "red", type = "l")
lines(ymd(clinton_views$date), clinton_views$views, col = "blue")
library(lubridate)
plot(ymd(trump_views$date), trump_views$views, col = "red", type = "l")
plot(ymd(trump_views$date), trump_views$views, col = "red", type = "l")
lines(ymd(clinton_views$date), clinton_views$views, col = "blue")
german_parties_views <- article_pageviews(
project = "de.wikipedia",
article = c("Christlich Demokratische Union Deutschlands", "Christlich-Soziale Union in Bayern", "Sozialdemokratische Partei Deutschlands", "Freie Demokratische Partei", "Bündnis 90/Die Grünen", "Die Linke", "Alternative für Deutschland"),
user_type = "user",
start = "2015090100",
end = "2017040100"
)
table(german_parties_views$article)
parties <- unique(german_parties_views$article)
dat <- filter(german_parties_views, article == parties[1])
plot(ymd(dat$date), dat$views, col = "black", type = "l")
dat <- filter(german_parties_views, article == parties[2])
lines(ymd(dat$date), dat$views, col = "blue")
dat <- filter(german_parties_views, article == parties[3])
lines(ymd(dat$date), dat$views, col = "red")
dat <- filter(german_parties_views, article == parties[7])
lines(ymd(dat$date), dat$views, col = "brown")
library(gtrendsR)
gtrends_merkel <- gtrends("Merkel", geo = c("DE"), time = "2016-10-01 2017-03-01")
gtrends_schulz <- gtrends("Schulz", geo = c("DE"), time = "2016-10-01 2017-03-01")
plot(gtrends_merkel)
plot(gtrends_schulz)
gtrends_merkel <- gtrends("Merkel", geo = c("DE"), time = "2017-01-01 2017-06-14")
gtrends_schulz <- gtrends("Schulz", geo = c("DE"), time = "2017-01-01 2017-06-14")
plot(gtrends_merkel)
plot(gtrends_schulz)
# get packages
p_needed <- c("haven", "plyr", "dplyr", "ROAuth", "streamR", "pageviews", "statsgrokse", "stringr", "gtrendsR", "lubridate")
packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
lapply(p_needed, require, character.only = TRUE)
q <- c("cdu","csu","spd","fdp","grüne","linke","afd","schulz","merkel","btw17")
load("/Users/munzerts/Dropbox/Uni/Teaching/SS 2017/Hertie School - Election Forecasting/materials/twitter_auth.Rdata")
filterStream("german_parties.json", track = q, timeout = 60*1, oauth = twitCred)
tweets <- parseTweets("german_parties.json", simplify = TRUE)
names(tweets)
View(tweets)
cat(tweets$text[1])
cdu <- str_detect(tweets$text, regex("cdu|csu|merkel", ignore_case = TRUE))
spd <- str_detect(tweets$text, regex("spd|schulz", ignore_case = TRUE))
fdp <- str_detect(tweets$text, regex("fdp", ignore_case = TRUE))
gru <- str_detect(tweets$text, regex("grüne", ignore_case = TRUE))
lin <- str_detect(tweets$text, regex("linke", ignore_case = TRUE))
afd <- str_detect(tweets$text, regex("afd", ignore_case = TRUE))
cdu
mentions_df <- data.frame(cdu, spd, fdp, gru, lin, afd)
colMeans(mentions_df)
ls("package:pageviews")
trump_views <- article_pageviews(project = "en.wikipedia", article = "Donald Trump", user_type = "user", start = "2015070100", end = "2017040100")
head(trump_views)
plot(ymd(trump_views$date), trump_views$views, col = "red", type = "l")
german_parties_views <- article_pageviews(
project = "de.wikipedia",
article = c("Christlich Demokratische Union Deutschlands", "Christlich-Soziale Union in Bayern", "Sozialdemokratische Partei Deutschlands", "Freie Demokratische Partei", "Bündnis 90/Die Grünen", "Die Linke", "Alternative für Deutschland"),
user_type = "user",
start = "2015090100",
end = "2017040100"
)
table(german_parties_views$article)
parties <- unique(german_parties_views$article)
dat <- filter(german_parties_views, article == parties[1])
plot(ymd(dat$date), dat$views, col = "black", type = "l")
dat <- filter(german_parties_views, article == parties[2])
lines(ymd(dat$date), dat$views, col = "blue")
dat <- filter(german_parties_views, article == parties[3])
lines(ymd(dat$date), dat$views, col = "red")
dat <- filter(german_parties_views, article == parties[7])
lines(ymd(dat$date), dat$views, col = "brown")
plot(ymd(dat$date), dat$views, col = "black", type = "l")
dat <- filter(german_parties_views, article == parties[2])
lines(ymd(dat$date), dat$views, col = "blue")
dat <- filter(german_parties_views, article == parties[3])
lines(ymd(dat$date), dat$views, col = "red")
dat <- filter(german_parties_views, article == parties[7])
lines(ymd(dat$date), dat$views, col = "brown")
parties <- unique(german_parties_views$article)
dat <- filter(german_parties_views, article == parties[1])
plot(ymd(dat$date), dat$views, col = "black", type = "l")
dat <- filter(german_parties_views, article == parties[2])
lines(ymd(dat$date), dat$views, col = "blue")
dat <- filter(german_parties_views, article == parties[3])
lines(ymd(dat$date), dat$views, col = "red")
dat <- filter(german_parties_views, article == parties[7])
lines(ymd(dat$date), dat$views, col = "brown")
install.packages("aws.alexa")
library(aws.alexa)
?category_listing
category_listing(path = "topsites/category/World/Deutsch/Medien")
keys <- scan("~/Dropbox/credentials/rootkey-20170609.csv",
what="character", sep="=")
